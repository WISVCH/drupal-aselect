<?php

/* A-Select Drupal hooks */
function aselect_install()
{
	$errorCodes = array(
		'0000' => t('No error.'),
		'0001' => t('Internal error occurred in A-Select.'),
		'0002' => t('You\'re not known by this A-Select Server.'),
		'0003' => t('The A-Select server couldn\'t authenticate you.'),
		'0004' => t('Your credentials are not valid.'),
		'0007' => t('Your credentials are not valid.'),
		'0008' => t('Your account is disabled.'),
		'0009' => t('Not allowed.'),
		'000a' => t('You could not be authenticated.'),
		'000b' => t('Access denied.'),
		'0030' => t('Invalid request.'),
		'0031' => t('The application you try to authenticate for, is unknown by this A-Select server.'),
		'0032' => t('The application you try to authenticate for, could not be reached by the A-Select server.'),
		'0033' => t('Internal error occurred in A-Select server.'),
		'0034' => t('Internal error occurred in A-Select server.'),
		'0035' => t('Internal error occurred in A-Select server.'),
		'0040' => t('User cancelled.'),
		'0050' => t('The A-Select server is busy. Please try later again.'),
		'0060' => t('Internal error occurred in the A-Select user database.'),
		'0070' => t('Your session is not valid.'),
		'0102' => t('Your session has expired.'),
		'4002' => t('Internal error occurred in A-Select component'),
		'4003' => t('Internal error occurred in A-Select component'),
		'4004' => t('Internal error occurred in A-Select component'),
		'4005' => t('Internal error occurred in A-Select component'),
		'4007' => t('Internal error occurred in A-Select component'),
		'4008' => t('Internal error occurred in A-Select component'),
		'4009' => t('Internal error occurred in A-Select component'),
		'4010' => t('Internal error occurred in A-Select component'),
		'4011' => t('Internal error occurred in A-Select component'),
		'5002' => t('Internal error occurred in database communication.'),
		'5003' => t('Internal error occurred in database communication.'),
		'5004' => t('Internal error occurred in database communication.'),
		'6001' => t('Internal error occurred in storage manager.'),
		'6002' => t('Internal error occurred in storage manager.'),
		'6003' => t('Internal error occurred in storage manager.'),
		'6004' => t('Internal error occurred in storage manager.'),
		'6005' => t('Internal error occurred in storage manager.'),
		'6006' => t('Internal error occurred in storage manager.'),
		'6009' => t('Internal error occurred in storage manager.'),
		'6010' => t('Internal error occurred in storage manager.'),
		'7001' => t('Internal error occurred in SAM.'),
		'7002' => t('Internal error occurred in SAM.'),
	);
	variable_set('aselect_error_codes', $errorCodes);

	$signAlgorithms = array(
		'sha1' => array('SHA-1', OPENSSL_ALGO_SHA1),
		'dss1' => array('DSS1', OPENSSL_ALGO_DSS1),
		'md2' => array('MD2', OPENSSL_ALGO_MD2),
		'md4' => array('MD4', OPENSSL_ALGO_MD4),
		'md5' => array('MD5', OPENSSL_ALGO_MD5),
	);
	variable_set('aselect_sign_algorithms', $signAlgorithms);
}

function aselect_menu()
{
	$items = array(
		'admin/config/content/aselect' => array(
			'title' => 'A-Select Authentication',
			'description' => 'Configuration for the A-Select module',

			'page callback' => 'drupal_get_form',
			'page arguments' => array('aselect_admin_form'),

			'access arguments' => array('access administration pages'),
			'type' => MENU_NORMAL_ITEM,
		)
,
		'aselect/login' => array(
			'title' => t('A-Select login'),
			'description' => t('Initiate ASelect login.'),

			'page callback' => 'aselect_login',

			'access callback' => 'user_is_anonymous',

			'type' => MENU_CALLBACK,
		),
		'aselect/verify' => array(
			'title' => t('A-Select verification'),
			'description' => t('Verify your A-Select session.'),

			'page callback' => 'aselect_verify',

			'access callback' => 'user_is_anonymous',

			'type' => MENU_CALLBACK,
		),
		'aselect/logout' => array(
			'title' => t('A-Select logout'),
			'description' => t('Logout A-Select SSO session.'),

			'page callback' => 'aselect_logout',

			'access callback' => 'user_is_logged_in',

			'type' => MENU_CALLBACK,
		),
	);

	return $items;
}

function aselect_admin_form($form, $state)
{
	$form['aselect_app_id'] = array(
		'#title' => t('A-Select application ID'),
		'#description' => t('The application ID assigned to this web app.'),

		'#type' => 'textfield',
		'#default_value' => variable_get('aselect_app_id', ''),
		'#required' => true,
	);
	$form['aselect_server_url'] = array(
		'#title' => t('A-Select server URL'),
		'#description' => t('The A-Select server base URL.'),

		'#type' => 'textfield',
		'#default_value' => variable_get('aselect_server_url', ''),
		'#required' => true,
	);
	$form['aselect_server_id'] = array(
		'#title' => t('A-Select server ID'),
		'#description' => t('The server ID used to identify the server.'),

		'#type' => 'textfield',
		'#default_value' => variable_get('aselect_server_id', 'openaselect'),
		'#required' => true,
	);

	$form['aselect_sign'] = array(
		'#title' => t('Enable request signing'),
		'#description' => t('Whether or not to sign the request sent to the A-Select server.'),

		'#type' => 'radios',
		'#options' => array(
			'1' => t('Enable'),
			'0' => t('Disable'),
		),
		'#default_value' => variable_get('aselect_sign', 0),
		'#required' => true,
	);
	$form['aselect_keyfile'] = array(
		'#title' => t('Signature keyfile'),
		'#description' => t('File path to the keyfile used to sign the request.'),

		'#type' => 'textfield',
		'#default_value' => variable_get('aselect_keyfile', ''),
		'#required' => false,
	);
	$form['aselect_keyphrase'] = array(
		'#title' => t('Signature keyphrase'),
		'#description' => t('The passphrase used to decrypt the keyfile.'),

		'#type' => 'password',
		'#default_value' => variable_get('aselect_keyphrase', ''),
		'#required' => false,
	);
	$form['aselect_sign_algorithm'] = array(
		'#title' => t('Request signing algorithm'),
		'#description' => t('The algorithm used to sign the request.'),

		'#type' => 'select',
		'#options' => array_map('array_shift', variable_get('aselect_sign_algorithms')),
		'#default_value' => variable_get('aselect_sign_algorithm', 'sha1'),
		'#required' => false,
	);

	return system_settings_form($form);
}

/* Drupal 'pages' */
function aselect_login()
{
	$returnParams = array();
	if(isset($_GET['destination'])) {
		$returnParams['dest'] = $_GET['destination'];
	}
	$callback = url('aselect/verify', array('absolute' => true, 'query' => $returnParams));

	$params = array(
		'request' => 'authenticate',
		'app_id' => variable_get('aselect_app_id'),
		'app_url' => $callback,
		'a-select-server' => variable_get('aselect_server_id')
	);
	$response = aselect_perform_request($params);

	if(intval($response['result_code']) != 0) {
		aselect_show_error('contacting the login server', $response['result_code']);
		return;
	}

	$redirectURL = http_build_url($response['as_url'], array(
		'query' => http_build_query(array(
			'a-select-server' => $response['a-select-server'],
			'rid' => $response['rid'],
		)),
	));
	drupal_goto($redirectURL);
}

function aselect_verify()
{
	if(!isset($_GET['rid']) || !isset($_GET['aselect_credentials'])) {
		drupal_set_message(t('Incorrect verification data supplied.'), 'error');
		return;
	}

	$params = array(
		'request' => 'verify_credentials',
		'a-select-server' => variable_get('aselect_server_id'),
		'rid' => $_GET['rid'],
		'aselect_credentials' => $_GET['aselect_credentials'],
	);
	$response = aselect_perform_request($params);

	if(intval($response['result_code']) != 0) {
		aselect_show_error('verifying login session', $response['result_code']);
		return;
	}

	/* TODO: Store user, login was succesful. */

	if(isset($_GET['dest'])) {
		drupal_goto($_GET['dest']);
	} else {
		drupal_goto(url('/'));
	}
}

function aselect_logout()
{

}

function aselect_show_error($activity, $code)
{
	$errorCodes = variable_get('aselect_error_codes');
	if(isset($errorCodes[$code])) {
		$aselectMessage = $errorCodes[$code];
	} else {
		$aselectMessage = t('an unknown error occurred.');
	}

	$errorMessage = t('An error occurred while @activity: @error_message', array('@activity' => t($activity), '@error_message' => $aselectMessage));
	drupal_set_message($errorMessage, 'error');
}

/* A-Select functions */
function aselect_perform_request($params)
{
	if(variable_get('aselect_sign', 0)) {
		$params['signature'] = aselect_sign_request($params);
	}

	$url = http_build_url(variable_get('aselect_server_url', 'localhost/openaselect'), array(
		'scheme' => 'https',
		'query' => http_build_query($params),
	), HTTP_URL_REPLACE | HTTP_URL_JOIN_QUERY);

	$response = drupal_http_request($url);

	if($response->code != 200) {
		return null;
	}
	return parse_str($response->data);
}

function aselect_sign_request($params)
{
	/* Get (algorithm name => openssl definition) from algorithm storage. */
	$algorithms = array_map('array_pop', variable_get('aselect_sign_algorithms'));

	$keyData = file_get_contents(variable_get('aselect_keyfile', ''));
	if(!$keyData) {
		return null;
	} 
	$key = openssl_pkey_get_private($keyData, variable_get('aselect_keyphrase', ''));
	if(!$key) {
		return null;
	}
	if(!isset($algorithms[variable_get('aselect_sign_algorithm', 'sha1')])) {
		return null;
	}
	$algorithm = $algorithms[variable_get('aselect_sign_algorithm', 'sha1')];

	if(isset($params['signature'])) {
		unset($params['signature']);
	}
	if(isset($params['request'])) {
		unset($params['request']);
	}
	sort($signParams);

	$signature = '';
	if(!openssl_sign(http_build_query($signParams), $data, $key, $algorithm)) {
		return null;
	}
	return $signature;
}
