<?php

/**
 * A-Select Drupal hooks
 */

/* A-Select Drupal install hook. Implements hook_install(). */
function aselect_install()
{
	/* Semi-human-friendly error messages. */
	$errorCodes = array(
		'0000' => t('No error.'),
		'0001' => t('Internal error occurred in A-Select.'),
		'0002' => t('You\'re not known by this A-Select Server.'),
		'0003' => t('The A-Select server couldn\'t authenticate you.'),
		'0004' => t('Your credentials are not valid.'),
		'0007' => t('Your credentials are not valid.'),
		'0008' => t('Your account is disabled.'),
		'0009' => t('Not allowed.'),
		'000a' => t('You could not be authenticated.'),
		'000b' => t('Access denied.'),
		'0030' => t('Invalid request.'),
		'0031' => t('The application you try to authenticate for, is unknown by this A-Select server.'),
		'0032' => t('The application you try to authenticate for, could not be reached by the A-Select server.'),
		'0033' => t('Internal error occurred in A-Select server.'),
		'0034' => t('Internal error occurred in A-Select server.'),
		'0035' => t('Internal error occurred in A-Select server.'),
		'0040' => t('User cancelled.'),
		'0050' => t('The A-Select server is busy. Please try later again.'),
		'0060' => t('Internal error occurred in the A-Select user database.'),
		'0070' => t('Your session is not valid.'),
		'0102' => t('Your session has expired.'),
		'4002' => t('Internal error occurred in A-Select component'),
		'4003' => t('Internal error occurred in A-Select component'),
		'4004' => t('Internal error occurred in A-Select component'),
		'4005' => t('Internal error occurred in A-Select component'),
		'4007' => t('Internal error occurred in A-Select component'),
		'4008' => t('Internal error occurred in A-Select component'),
		'4009' => t('Internal error occurred in A-Select component'),
		'4010' => t('Internal error occurred in A-Select component'),
		'4011' => t('Internal error occurred in A-Select component'),
		'5002' => t('Internal error occurred in database communication.'),
		'5003' => t('Internal error occurred in database communication.'),
		'5004' => t('Internal error occurred in database communication.'),
		'6001' => t('Internal error occurred in storage manager.'),
		'6002' => t('Internal error occurred in storage manager.'),
		'6003' => t('Internal error occurred in storage manager.'),
		'6004' => t('Internal error occurred in storage manager.'),
		'6005' => t('Internal error occurred in storage manager.'),
		'6006' => t('Internal error occurred in storage manager.'),
		'6009' => t('Internal error occurred in storage manager.'),
		'6010' => t('Internal error occurred in storage manager.'),
		'7001' => t('Internal error occurred in SAM.'),
		'7002' => t('Internal error occurred in SAM.'),
	);
	variable_set('aselect_error_codes', $errorCodes);

	/* Build supported algorithm array */
	$signAlgorithms = array();
	if(defined('OPENSSL_ALGO_SHA1')) {
		$signAlgorithms['sha1'] = array('SHA-1', OPENSSL_ALGO_SHA1);
	}
	if(defined('OPENSSL_ALGO_DSS1')) {
		$signAlgorithms['dss1'] = array('DSS1', OPENSSL_ALGO_DSS1);
	}
	if(defined('OPENSSL_ALGO_MD2')) {
		$signAlgorithms['md2'] = array('MD2', OPENSSL_ALGO_MD2);
	}
	if(defined('OPENSSL_ALGO_MD4')) {
		$signAlgorithms['md2'] = array('MD2', OPENSSL_ALGO_MD2);
	}
	if(defined('OPENSSL_ALGO_MD5')) {
		$signAlgorithms['md5'] = array('MD5', OPENSSL_ALGO_MD5);
	}
	variable_set('aselect_sign_algorithms', $signAlgorithms);
}

/* A-Select Drupal menu hook. Implements hook_menu(). */
function aselect_menu()
{
	$items = array(
	    'admin/config/people/aselect' => array(
	        'title' => t('A-Select Authentication'),
	        'description' => t('Configuration for authentication and authorization using A-Select.'),

	        'page callback' => 'drupal_get_form',
	        'page arguments' => array('aselect_admin_form'),
                'access arguments' => array('access administration pages'),

	        'type' => MENU_NORMAL_ITEM,
	    ),
	    'aselect/login' => array(
	        'title' => t('A-Select login'),
	        'description' => t('Initiate ASelect login.'),

	        'page callback' => 'aselect_login',
	        'access callback' => 'user_is_anonymous',

	        'type' => MENU_CALLBACK,
	    ),
	    'aselect/verify' => array(
	        'title' => t('A-Select verification'),
	        'description' => t('Verify your A-Select session.'),

	        'page callback' => 'aselect_verify',
	        'access callback' => 'user_is_anonymous',

	        'type' => MENU_CALLBACK,
	    ),
	    'aselect/logout' => array(
	        'title' => t('A-Select logout'),
	        'description' => t('Logout A-Select SSO session.'),

	        'page callback' => 'aselect_logout',
	        'access callback' => 'user_is_logged_in',

	        'type' => MENU_CALLBACK,
	    ),
	);

	return $items;
}


/**
 * A-Select Drupal callbacks.
 */

/* Drupal A-Select admin configuration callback, builds up the A-Select section in the configuration. */
function aselect_admin_form($form, $state)
{
	$form['aselect_app_id'] = array(
	    '#title' => t('A-Select application ID'),
	    '#description' => t('The application ID assigned to this web app.'),

	    '#type' => 'textfield',
	    '#default_value' => variable_get('aselect_app_id', ''),
	    '#required' => true,
	);
	$form['aselect_server_url'] = array(
	    '#title' => t('A-Select server URL'),
	    '#description' => t('The A-Select server base URL.'),

	    '#type' => 'textfield',
	    '#default_value' => variable_get('aselect_server_url', ''),
	    '#required' => true,
	);
	$form['aselect_server_id'] = array(
	    '#title' => t('A-Select server ID'),
	    '#description' => t('The A-Select server ID.'),

	    '#type' => 'textfield',
	    '#default_value' => variable_get('aselect_server_id', 'openaselect'),
	    '#required' => true,
	);

	$form['aselect_sign'] = array(
	    '#title' => t('Enable request signing'),
	    '#description' => t('Whether or not to sign the request sent to the A-Select server.'),

	    '#type' => 'radios',
	    '#options' => array(
	        '1' => t('Enable'),
	        '0' => t('Disable'),
	    ),
	    '#default_value' => variable_get('aselect_sign', 0),
	    '#required' => true,
	);
	$form['aselect_keyfile'] = array(
	    '#title' => t('Signature keyfile'),
	    '#description' => t('File path to the keyfile used to sign the request.'),

	    '#type' => 'textfield',
	    '#default_value' => variable_get('aselect_keyfile', ''),
	    '#required' => false,
	);
	$form['aselect_keyphrase'] = array(
	    '#title' => t('Signature keyphrase'),
	    '#description' => t('The passphrase used to decrypt the keyfile.'),

	    '#type' => 'password',
	    '#default_value' => variable_get('aselect_keyphrase', ''),
	    '#required' => false,
	);
	$form['aselect_sign_algorithm'] = array(
	    '#title' => t('Request signing algorithm'),
	    '#description' => t('The algorithm used to sign the request.'),

	    '#type' => 'select',
	    '#options' => array_map('array_shift', variable_get('aselect_sign_algorithms')),
	    '#default_value' => variable_get('aselect_sign_algorithm', 'sha1'),
	    '#required' => false,
	);

	return system_settings_form($form);
}

/* A-Select login callback, performs an actual login redirection. */
function aselect_login()
{
	/* Request login URL. */
	$returnParams = array();
	if(isset($_SERVER['HTTP_REFERER'])) {
		$returnParams['dest'] = $_SERVER['HTTP_REFERER'];
	}
	$callback = url('aselect/verify', array('absolute' => true, 'query' => $returnParams));

	$response = aselect_perform_request('authenticate', array(
	    'app_id' => variable_get('aselect_app_id'),
	    'app_url' => $callback,
	    'a-select-server' => variable_get('aselect_server_id')
	));

	if($response === NULL || intval($response['result_code']) != 0) {
		aselect_show_error('contacting the login server', $response['result_code']);
		return;
	}

	/* Build redirect URL. */
	$redirectURL = http_build_url($response['as_url'], array(
	        'query' => http_build_query(array(
	        'a-select-server' => $response['a-select-server'],
	        'rid' => $response['rid'],
	    ), '', '&'),
	), HTTP_URL_JOIN_QUERY);
	
	// Tijdelijke beun oplossing, waarom doen we dit?
	$redirectURL = str_replace("amp;","",$redirectURL);

	/* Redirect user. */
	drupal_goto($redirectURL);
}

/* A-Select verification function, verifies a login session when the user is redirected back from the A-Select server. */
function aselect_verify()
{
	/* Make sure we're not called by some random idiot. */
	if(!isset($_GET['rid']) || !isset($_GET['aselect_credentials'])) {
		drupal_set_message(t('Incorrect verification data supplied.'), 'error');
		return;
	}

	$response = aselect_perform_request('verify_credentials', array(
	    'a-select-server' => variable_get('aselect_server_id'),
	    'rid' => $_GET['rid'],
	    'aselect_credentials' => $_GET['aselect_credentials'],
	));

	/* Make sure the session is valid. */
	if($response === NULL || intval($response['result_code']) != 0) {
		aselect_show_error('verifying login session', $response['result_code']);
		return;
	}

        /* Retrieve session attributes, if needed. */
	if(!isset($response['attributes'])) {
		$attribute_data = aselect_perform_request('attributes', array(
		    'ticket' => $response['ticket'],
		    'uid' => $response['uid'],
		    'organization' => $response['organization']
		));
		if($attribute_data === NULL || intval($response['result_code']) != 0) {
			aselect_show_error('retrieving user attributes', $response['result_code']);
			return;
		}
	} else {
		$attribute_data = base64_decode($response['attributes']);
	}
	/* Parse attributes. */
	$attributes = NULL;
	parse_str($attribute_data, $attributes);

	/* Set user session variables for later use. */
	$_SESSION['aselect'] = array();
	$_SESSION['aselect']['uid'] = $response['uid'];
	$_SESSION['aselect']['organization'] = $response['organization'];
	$_SESSION['aselect']['attributes'] = $attributes;

	/* UP TO IMPLEMENTOR: Store user, login was succesful. */

	/* Redirect to whatever page we came from, or just to the home page if we have none. */
	if(isset($_GET['dest'])) {
		drupal_goto($_GET['dest']);
	} else {
		drupal_goto(url('/'));
	}
}

/* A-Select logout callback, log the user out from current and every other SSO session. */
function aselect_logout()
{
	/* UP TO IMPLEMENTOR: log user out from local session. */

	/* TODO: Log out from SSO. */
}


/**
 * A-Select API wrapper/helper functions.
 */

/* Format an A-Select error nicely. */
function aselect_show_error($activity, $code)
{
	$errorCodes = variable_get('aselect_error_codes');
	if(isset($errorCodes[$code])) {
		$aselectMessage = $errorCodes[$code];
	} else {
		$aselectMessage = t('an unknown error occurred.');
	}

	$errorMessage = t('An error occurred while @activity: @error_message', array('@activity' => t($activity), '@error_message' => $aselectMessage));
	drupal_set_message($errorMessage, 'error');
}

/* Perform actual A-Select request to server. Returns an associative array containing the server response. */
function aselect_perform_request($request, $params)
{
	/* Sign request if we need to. */
	if(variable_get('aselect_sign', 0)) {
		$params['signature'] = aselect_sign_request($params);
	}
	$params['request'] = $request;

	/* Perform actual request. */
	$url = http_build_url(variable_get('aselect_server_url', 'localhost/openaselect'), array(
	    'scheme' => 'https',
	    'query' => http_build_query($params, '', '&'),
	), HTTP_URL_JOIN_QUERY);

	$response = drupal_http_request($url);
	if($response->code != 200) {
		return null;
	}

	/* Parse response, being a regular query string. */
	parse_str($response->data, $data);
	return $data;
}

/* Sign A-Select request for extra security, if configured and/or required by server. */
function aselect_sign_request($params)
{
	/* Get (algorithm name => openssl definition) from algorithm storage. */
	$algorithms = array_map('array_pop', variable_get('aselect_sign_algorithms'));
	$algorithm = variable_get('aselect_sign_algorithm', 'sha1');

        /* Attempt to parse private key. */
	$keyData = file_get_contents(variable_get('aselect_keyfile', ''));
	if(!$keyData) {
		return null;
	} 
	$key = openssl_pkey_get_private($keyData, variable_get('aselect_keyphrase', ''));
	if(!$key) {
		return null;
        }

        /* Attempt to get OpenSSL definition for signing algorithm. */
	if(!isset($algorithms[$algorithm])) {
		return null;
	}
	$algorithm = $algorithms[$algorithm];

        /* Clean and sort parameters. */
	if(isset($params['signature'])) {
		unset($params['signature']);
	}
	if(isset($params['request'])) {
		unset($params['request']);
	}
	sort($params);

        /* And have OpenSSL sign it. */
	$signature = '';
	if(!openssl_sign(http_build_query($params, '', '&'), $signature, $key, $algorithm)) {
		return null;
	}
	return $signature;
}
